*verminal.txt* A minimal terminal interface for vim. 

Verminal is a minimalistic terminal interface for vim. It will work on any 
system, because it simply relies on vim's existing ability to run external 
commands. Whatever commands are available in the shell that starts vim should
be available in verminal. Please note that interactive commands are not
supported. Verminal also remaps some commands which vim has internal support 
for. For a list of these captured commands, please see the Captured Commands
section. Verminal also allows you to run ex mode commands by typing :Command
from a verminal buffer.  
====================================================================
CONTENTS                                            *VerminalContents*

    1. Usage ................ |VerminalUsage|
    2. Interactive Commands.. |VerminalInteractiveCommands|
    3. Captured Commands..... |VerminalCapturedCommands|
    4. Mappings ............. |VerminalMappings|
    5. License .............. |VerminalLicense|
    6. Future Development ... |VerminalFutureDevelopment|
    7. Contributing ......... |VerminalContributing|
    8. Changelog ............ |VerminalChangelog|
    9. Credits .............. |VerminalCredits|
====================================================================
Section 1: Usage                                       *PotionUsage*
Verminal supports two "modes". The first, external mode, can be used by simply
typing a command in the verminal window (ex: ls -lah). The second, Ex mode, 
is used by typing a :command in a verminal window (ex: :source file.vim). 

To use verminal, you can type 
:call NewBuffer()
which will open a new buffer with a verminal initialized in it. 

If you have a buffer you wish to convert to a verminal, you can type 
:call InitMappings()
It is recommended that you map one of these functions to a keybinding for ease of
use. For example, to map NewBuffer() to <Leader>om, add this line to your .vimrc: 
nnoremap <Leader>om :call NewBuffer()<Enter>

By default, verminal uses your z register whenever a command is run. Please be 
mindful of this. Support is coming for users to select which register is used. 

====================================================================
Section 2: Ineractive Commands                      *VerminalInteractiveCommands*
Verminal will not work with interactive commands. Commands which prompt for
standard input are not considered interactive and will work. However, things like 
the emacs operating system will not be able to run. This is due to limitations of
 vim, and in an effort to make this plugin as portable as possible, support for
interactive commands is will not be added unless vim adds this feature.
Given Bram Mooleanar's positon on shells in vim, this is unlikely. 

====================================================================
Section 3: Captured Commands                      *VerminalCapturedCommands*
Some commands are "captured" by verminal and handled specially. Usually, this is 
to use an internal vim implemetation of a command instead of the external 
implementation. Below is a list of captured commands, as well as a brief 
description of what they are redirected to do. 
* pwd       -- use internal vim implementation
* cd        -- use internal vim implementation
* vim       -- open file in new hidden buffer
* emacs     -- four letter words are not allowed
====================================================================
Section 4: Mappings                                  *VerminalMappings*
Verminal will remap the Enter key from insert mode to a function, so users 
will not be able to enter line breaks in this way. Running the command 
:call RemoveMappings() will remove the mapping. If you wish to get the mappings
back after doing this, run :call InitMappings(). 


====================================================================
Section 5: License                                       *VerminalLicense*
Verminal is licensed under the GNU GPL license. 


====================================================================
Section 6: FutureDevelopment                   *VerminalFutureDevelopment*
There are both features and optimizations planned for future releases. 
Planned features: 
* A vim-mode, an interactive vimscript shell
Planned optimizations:
* See about using append() instead of register hacks to insert text
* Add support for a vim-mode, so vim shell doesn't need colon in front of 
commands to work properly. 
* Allow user to select which register verminal uses

====================================================================
Section 7: Contributing                   *VerminalContributing*
To contribute to verminal, please send a pull request to the Verminal
github repository (at this time, the repository is f41lurizer/verminal).
    8. Changelog ............ |VerminalChangelog|
    9. Credits .............. |VerminalCredits|

====================================================================
Section 8: Changelog                   *VerminalChangelog*
Version 1.0.0 -- External and Ex mode commands work properly, help docs started

====================================================================
Section 9: Credits                   *VerminalCredits*
f41lurizer
